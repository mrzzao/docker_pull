name: 'Maximize build disk space'
description: 'Maximize the available disk space for your build job'
branding:
  icon: 'crop'
  color: 'orange'
inputs:
  root-reserve-mb:
    description: 'Space to be left free on the root filesystem, in Megabytes.'
    required: false
    default: '1024'
  temp-reserve-mb:
    description: 'Space to be left free on the temp filesystem (/mnt), in Megabytes.'
    required: false
    default: '100'
  swap-size-mb:
    description: 'Swap space to create, in Megabytes.'
    required: false
    default: '4096'
  overprovision-lvm:
    description: 'Create the LVM disk images as sparse files'
    required: false
    default: 'false'
  remove-dotnet:
    description: 'Removes .NET runtime and libraries. (frees ~17 GB)'
    required: false
    default: 'false'
  remove-android:
    description: 'Removes Android SDKs and Tools. (frees ~11 GB)'
    required: false
    default: 'false'
  remove-haskell:
    description: 'Removes GHC (Haskell) artifacts. (frees ~2.7 GB)'
    required: false
    default: 'false'
  remove-codeql:
    description: 'Removes CodeQL Action Bundles. (frees ~5.4 GB)'
    required: false
    default: 'false'
  remove-docker-images:
    description: 'Removes cached Docker images. (frees ~3 GB)'
    required: false
    default: 'false'
  move-docker-to-mnt:
    description: 'Move Docker data directory to /mnt partition'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: bash
      run: |
        echo "Memory and swap:"
        sudo free -h
        echo
        sudo swapon --show
        echo
        echo "Available storage:"
        sudo df -h
        echo

    - name: Remove unwanted software
      shell: bash
      run: |
        echo "Removing unwanted software..."
        if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
          sudo rm -rf /usr/share/dotnet
        fi
        if [[ ${{ inputs.remove-android }} == 'true' ]]; then
          sudo rm -rf /usr/local/lib/android
        fi
        if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
          sudo rm -rf /opt/ghc
        fi
        if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
          sudo rm -rf /opt/hostedtoolcache/CodeQL
        fi
        if [[ ${{ inputs.remove-docker-images }} == 'true' ]]; then
          sudo docker image prune --all --force
        fi
        echo "... done"

    - name: Move Docker data to /mnt
      if: inputs.move-docker-to-mnt == 'true'
      shell: bash
      run: |
        echo "=== Moving Docker data to /mnt ==="
        echo "Before moving:"
        df -h
        
        # Stop Docker service
        sudo systemctl stop docker || true
        
        # Remove old data in /mnt if exists
        sudo rm -rf /mnt/docker
        
        # Move Docker data to /mnt
        if [ -d "/var/lib/docker" ]; then
          sudo mv /var/lib/docker /mnt/
        else
          echo "Docker directory not found, creating new one in /mnt"
          sudo mkdir -p /mnt/docker
        fi
        
        # Create symbolic link
        sudo ln -sf /mnt/docker /var/lib/docker
        
        # Start Docker service
        sudo systemctl start docker
        
        # Wait for Docker to start
        sleep 10
        
        echo "After moving:"
        df -h
        echo "Docker info:"
        docker system df

    - name: Disk space report after modification
      shell: bash
      run: |
        echo "Memory and swap:"
        sudo free -h
        echo
        sudo swapon --show
        echo
        echo "Available storage:"
        sudo df -h
        echo
        echo "Docker storage info:"
        docker system df
